name: OpenWrt CI Final

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: openwrt/imagebuilder:x86-64-openwrt-24.10
  BUILD_ROOT: ${{ github.workspace }}/openwrt_build
  DOCKER_OUTPUT: /home/builder/imagebuilder/bin
  KERNEL_PATCHVER: 6.6

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize environment
      run: |
        # 清理并重建目录结构
        sudo rm -rf ${{ env.BUILD_ROOT }}
        mkdir -p ${{ env.BUILD_ROOT }}/{logs,config,files}
        
        # 生成最小化网络配置
        cat > ${{ env.BUILD_ROOT }}/config/network <<EOF
        config interface 'lan'
            option proto 'static'
            option ipaddr '192.168.6.1'
            option netmask '255.255.255.0'
        EOF

        # 设置目录权限
        sudo chmod -R 777 ${{ env.BUILD_ROOT }}

    - name: Verify kernel compatibility
      run: |
        docker run --rm ${{ env.DOCKER_IMAGE }} \
          bash -c "ls $PWD/target/linux/x86/ | grep '^config-${{ env.KERNEL_PATCHVER }}\.'"

    - name: Run safe build
      id: build
      run: |
        docker run --rm \
          -e FORCE_UNSAFE_CONFIGURE=1 \
          -v ${{ env.BUILD_ROOT }}/logs:${{ env.DOCKER_OUTPUT }}/logs \
          -v ${{ env.BUILD_ROOT }}/config:/custom_config \
          ${{ env.DOCKER_IMAGE }} \
          bash -exc " \
            export LOG_FILE='${{ env.DOCKER_OUTPUT }}/logs/build.log'; \
            mkdir -p $(dirname \$LOG_FILE); \
            { \
              make image V=sc \
                PROFILE='generic' \
                KERNEL_PATCHVER='${{ env.KERNEL_PATCHVER }}' \
                PACKAGES='base-files' \
                FILES='/custom_config' \
                BIN_DIR='${{ env.DOCKER_OUTPUT }}' \
                2>&1 | tee \$LOG_FILE; \
              echo \$? > ${{ env.BUILD_ROOT }}/exitcode; \
            } || true; \
            exit \$(cat ${{ env.BUILD_ROOT }}/exitcode) \
          "

    - name: Post-mortem analysis
      if: always()
      run: |
        echo "=== Build artifacts structure ==="
        tree -L 3 ${{ env.BUILD_ROOT }} || true

        echo "=== Critical error patterns ==="
        grep -iE 'error|fail|undefined' ${{ env.BUILD_ROOT }}/logs/build.log | head -n 50 || true

        echo "=== Kernel config verification ==="
        docker run --rm ${{ env.DOCKER_IMAGE }} \
          grep CONFIG_KERNEL_ ${{ env.DOCKER_OUTPUT }}/.config | grep ${{ env.KERNEL_PATCHVER }}

    - name: Upload debug bundle
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: debug-bundle
        path: ${{ env.BUILD_ROOT }}
        retention-days: 3
