name: OpenWrt Builder

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  #schedule:
   #- cron: 0 16 * * *

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 添加 universe 和 multiverse 源
        sudo add-apt-repository universe
        sudo add-apt-repository multiverse

        # 更新软件源列表
        sudo apt-get update -qq

        # 清理不必要的文件
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL

        # 安装必要的依赖项
        sudo apt-get -qq install -y \
          binutils bzip2 flex gawk grep libc-dev libz-dev make perl python3 rsync unzip \
          libncurses5-dev libncursesw5-dev uci ppp

        # 清理已安装的包
        sudo apt-get -qq autoremove --purge
        sudo apt-get -qq clean

        # 设置时区
        sudo timedatectl set-timezone "$TZ"

        # 创建工作目录
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Check disk space before cloning
      run: df -hT

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH 连接到 Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Check disk space after downloading packages
      run: df -hT

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make defconfig
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check if firmware directory exists
      run: |
        if [ ! -d "openwrt/bin/targets/*/*" ]; then
          echo "Error: Directory openwrt/bin/targets/*/* does not exist."
          exit 1
        fi

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Clean up build artifacts
      run: |
        cd openwrt
        make dirclean
        find . -name "*.o" -exec rm -f {} \;
        find . -name "*.ko" -exec rm -f {} \;
        find . -name "*.so" -exec rm -f {} \;
        find . -name "*.a" -exec rm -f {} \;
        find . -name "*.symvers" -exec rm -f {} \;
        find . -name "*.mod.c" -exec rm -f {} \;
        find . -name "*.mod.o" -exec rm -f {} \;
        find . -name "*.cmd" -exec rm -f {} \;
        find . -name "*.d" -exec rm -f {} \;
        find . -name "*.tmp" -exec rm -f {} \;
        find . -name "*.log" -exec rm -f {} \;
        find . -name "*.gz" -exec rm -f {} \;
        find . -name "*.bz2" -exec rm -f {} \;
        find . -name "*.xz" -exec rm -f {} \;
        find . -name "*.zip" -exec rm -f {} \;
        find . -name "*.tar" -exec rm -f {} \;
        find . -name "*.tar.gz" -exec rm -f {} \;
        find . -name "*.tar.bz2" -exec rm -f {} \;
        find . -name "*.tar.xz" -exec rm -f {} \;
        find . -name "*.img" -exec rm -f {} \;
        find . -name "*.bin" -exec rm -f {} \;
        find . -name "*.elf" -exec rm -f {} \;
        find . -name "*.ko.cmd" -exec rm -f {} \;
        find . -name "*.mod.c.cmd" -exec rm -f {} \;
        find . -name "*.mod.o.cmd" -exec rm -f {} \;
        find . -name "*.symvers.cmd" -exec rm -f {} \;
        find . -name "*.order" -exec rm -f {} \;
        find . -name "*.built-in.a.cmd" -exec rm -f {} \;
        find . -name "*.built-in.o.cmd" -exec rm -f {} \;
        find . -name "*.ko.unsigned" -exec rm -f {} \;
        find . -name "*.ko.unsigned.cmd" -exec rm -f {} \;
        find . -name "*.ko.unsigned.o" -exec rm -f {} \;
        find . -name "*.ko.unsigned.o.cmd" -exec rm -f {} \;
        find . -name "*.ko.unsigned.mod.c" -exec rm -f {} \;
        find . -name "*.ko.unsigned.mod.c.cmd" -exec rm -f {} \;
        find . -name "*.ko.unsigned.mod.o" -exec rm -f {} \;
        find . -name "*.ko.unsigned.mod.o.cmd" -exec rm -f {} \;

    - name: Check disk space after cleaning up
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        if [ -d "openwrt/bin/targets/*/*" ]; then
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "Error: Directory openwrt/bin/targets/*/* does not exist."
          exit 1
        fi

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
